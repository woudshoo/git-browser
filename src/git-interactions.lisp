(in-package :git-browser)




(defparameter *git-project*
  #P "/Users/woudshoo/Development/Source/IntelliMagic/RMFMagic/.git"
#+nil  #P"/Users/woudshoo/Development/Source/Lisp/wo-git-gui/.git")

(defparameter *default-graph* nil)
(defparameter *revisions-store* nil)

(defparameter *dead-revisions*  '("F0BCC1A07FFB8E0BC0098B679C5BB79C92208337"
				  "7091DFADB75F1D895F527DCF880915DD243C8047"
				  "FEBF3F4A1780FA249C7ADC3C58DC7FF75751D61C"
				  "952B1C5647528855A2BF5E4E52ABAE4DAA2D3D4F"
				  "391F4E6A0AE71C99B0E822A981F3C94155B7062A"
				  "9EDA00F6C3422F7C85B0D2306BD00D7A74FA31F6"
				  "0299B35B107A7446AE33EEEACD131ED4093C3956"
				  "9C4CF09585BC879770AECE7C19BF5217A42BF41F"
				  "CC859C37D9F4280159839BD92ACAE8681A9A6706"
				  "DA137585F0460EEABB4C63FC2115F6B2D7537825"
				  "4286494064976A89452EB52F85FD4E03006DA5FD" ;; nextmajor
				  "CF52C30B0B84E5E8126AEA6B79F710543D0A6BA6"
				  "6506AA16859E815DE4C384DB3C443B3ADEE1B201"
				  "6BC8C53C6B8080CB095A0BC35CC06055463DB7EE"
				  "FFD9E70E636C8C4F763DF82064F4C328CCCB330D"
				  "71C7509FEEB234174E9876051E9F99C917A0B1A6"
				  "C13BCBFAEC238394BFF8558E422D25EA5CA01DB6" ;; keep table modifications
				  "086DB3D876D6819F1B0B162FB93F0636501E0F57"

				  ;;;; testing

				  "56B42CE22FF63BDC6A2A2C1548E10FFECEC6ABE5"

				  ;;;; list for TODO.org
				  "32D04CA435FAF8B54E1FA992570EFCC4FE171F95"
				  "45A98B42AD00946A06E01223BDB682AE56EC5F2C"
				  "D372AF3358BCC9AE550D2D025C082F61CFC56C3B"
				  "B6F2A2CBA01893B3416A907048E2029C5957E4B0"
				  "642728CBA67CD7A985857C53882BC878C5D20070"
				  "4949740753B4EF96811AE54FC8180B750D888208"
				  "681CAF77F9607C63D0C10073F70BA1BF1A2697F5"
				  "1BF27E8C649FDFF4AAC160F704FB8B224BD6AD07"
				  "6571BA8F8594D944C31F9F61BF6F65DAEE89A55F"
				  "823756B8A07AE6C4F9E5DF774F0528392D7FF451"
				  "08489F848F6F2C0972FC9C3C2764EEBA95DFD1A5"
				  "EF9EE96A72BC8EABE277B6E636B3C1D9ADF6C985"
				  "3D5D788D72ADD658D8FF53FB49663E526D29C63D"
				  "54E4BAEB8E25BFA4600E78C0987738C88FB9FB44"
				  "5EF1977BFF43F5243F252C45DF6903C29C12725F"
				  "CE1F85618CACDC3CCA303EB96803257209939252"
				  "C3AC4E4BBD7B6D59F500EE9084EF1CECD46507FB"
				  "6878D943118FEE9CE6AF671C8FDE9E902C3C88A5"
				  "08A9CFC10FDEF03FA0410B21C5AA45A9E10219A9"
				  "850654138B55E393066C4D1D15C685D0571507BA"
				  "F0662B5A3ADA491AA2747AC48EF6D743A33B1361"
				  "B4B4143080F78DFD743169D1DB5DF95451BC66E0"
				  "AD76190277BFED9F465E8FF3A6F76B596E471428"
				  ))
(defun read-graph (&optional (git-project *git-project*))
  (setf *default-graph* (wo-git:get-git-graph git-project))
  (setf *revisions-store* (make-instance 'git-revision-store))
  (loop :for name :in (all-names *default-graph*)
     :do
     (persist-object *revisions-store*
		     (make-instance 'git-revision 
				    :label (simplify-node-name name)
				    :sha (name-to-vertex name *default-graph*)))))


(eval-when (:compile-toplevel :load-toplevel :execute)
  (setf (logical-pathname-translations "tmp")
	'(("**;*.*.*" "/tmp/"))))

(defun clear-cache (&optional (name-part :wild))
  "Remove all cache files that are generated by wo-git-gui.
Note that it just removes all files matching '.dot' and '.svg'
from the logical path tmp, so be carefull."
  (mapc #'delete-file (directory (make-pathname :host "tmp" :name name-part :type "dot")))
  (mapc #'delete-file (directory (make-pathname :host "tmp" :name name-part :type "svg"))))




(defun simplify-node-name (name)
  "Simplifies a full revision/tag name.  Typically they start with
lots of junk like 'refs/remove/...'  so we shorten them a bit with
this function."
  (cl-ppcre:regex-replace-all "[-_]" 
			  (subseq name (+ 1 (or (position #\/ name :from-end t) -1)))
			  " "))


(defun vertex-or-name-to-string (vertex)
  (etypecase vertex
    (integer (format nil "~(~40,'0X~)" vertex))
    (string vertex)))


(defun named-boundary-revisions (graph dead-revisions)
  "Return all revisions from the graph that:
1 - are on the boundary (no children or no parents)
2 - have a name
3 - are not mentioned in the dead-revisions list."
  (wo-util:remove-from-set
   (remove-duplicates
    (mapcar (lambda (v) (name-or-rev-to-vertex v graph)) 
	    (wo-git:boundary-names graph)))
   dead-revisions
   :test #'equalp))


(defun remove-classifications-with-empty-sources-or-targets (classification)
  "Removes from the classification map all entries which have eiter an empty source list or
empty target list."
  (fset:filter (lambda (k v) 
		 (declare (ignore v))
		 (and (car k) (cdr k))) classification))

(defun classification-by-both-sided-reachibility (boundary-verticies graph)
  "Returns a classification map containing all vertices which have an ancestor and
a descendend in the BOUNDARY-VERTICIES set."
  (remove-classifications-with-empty-sources-or-targets
   (wo-graph-functions:classify-by-reacheability 
    graph #'targets-of-vertex #'sources-of-vertex 
    :selector-p (lambda (v g) (declare (ignore g)) (member v boundary-verticies)))))

(defun classified-by-edge-graph (graph stream &key 
						(node-attributes (make-default-node-attribute))
						(edge-attributes (lambda (e g) (declare (ignore g)) (if (> (length e) 2) '(:color :red))))
						dead-revisions)
  "Just for testing, very very inefficient."
  (let* ((boundary-verticies (named-boundary-revisions graph dead-revisions))
	 (classification (classification-by-both-sided-reachibility boundary-verticies graph))
	 (result (make-instance 'wo-git::git-graph :test #'equalp))
	 (seen-edges (make-hash-table :test #'equalp))
	 (v-v-map (make-hash-table :test #'equalp))   ;;; Maps original verticies to vertices in reduced graph.
	 (counter 0))

    (setf (wo-git::name-map result) (make-hash-table :test #'equalp)) ;; Make map from new vertex to name

    (setf *dd-cl* classification)

    (fset:do-map (k v classification)
      "Adds vertices from classification to new graph.
The new graph has nodes identified by the 'counter'.  Also
this method updates the v-v map so we can construct the edges in the next phase."
      (let* ((candidates (fset:intersection (car k) (cdr k)))
	     (id (if (eql 1 (fset:size candidates))
		     (fset:arb candidates)
		     (incf counter))))
	(wo-graph:add-vertex id result)
	(setf (gethash id (wo-git::name-map result))
	      (if (eql 1 (fset:size candidates))
		  (wo-git:vertex-names (fset:arb candidates) graph)
		  (list (format nil "#: ~D" (length v)))))

	(loop :for v2 :in v :do
	   (setf (gethash v2 v-v-map) id))))

    (setf *dd-v-v-map* v-v-map)
    (setf (wo-git::reverse-name-map result) (wo-util:reverse-table (wo-git::name-map result)))
  
    (loop :for v :in (wo-graph:all-vertices graph)
       :for v2 = (gethash v v-v-map)
       :do
       (when v2
	 (loop :for tv :in (wo-graph:targets-of-vertex v graph)
	    :for tv2 = (gethash tv v-v-map)
	    :do
	    (unless (or (not v2) (not tv2) (equal v2 tv2) (gethash (cons v2 tv2) seen-edges))
	      (wo-graph:add-edge v2 tv2 nil result)
	      (setf (gethash (cons v2 tv2) seen-edges) t)))))

    (setf *dd-g* result)
    (setf result (wo-graph-functions:simplify 
		  result 
		  :selector (constantly nil) #+nil (lambda (v g)
			      (< (wo-graph-functions:vertex-minimum-degree v g) 1))
		  :reducers *trivial-edge-reducers*))
    (setf *dd-r* result)
    (write-to-dot stream result
		  :node-attributes node-attributes
		  :edge-attributes edge-attributes
		  :node-to-id #'vertex-or-name-to-string)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defparameter *trivial-edge-reducers*
  (list 
   (wo-graph-functions:make-double-sided-reducer
    #'wo-graph:targets-of-vertex
    #'wo-graph:sources-of-vertex
    1 1
    (lambda (sr tg g) (wo-graph:add-edge sr tg
					 (make-array 3 :initial-contents (list 'reduced
									       sr
									       tg))
					 g)))
#+nil   (wo-graph-functions:make-single-sided-reducer
    #'wo-graph:targets-of-vertex
    #'wo-graph:sources-of-vertex
    1 
    (lambda (sr tg g) (wo-graph:add-edge sr tg
					 (make-array 3 :initial-contents (list 'reduced
									       sr
									       tg))
					 g)))
#+nil   (wo-graph-functions:make-single-sided-reducer
	    #'wo-graph:sources-of-vertex
	    #'wo-graph:targets-of-vertex
	    1 (lambda (tg sr g) (wo-graph:add-edge sr tg
						   (make-array 3 :initial-contents (list 'reduced
											 sr
											 tg))
						   g))) ))

(defparameter *default-reducers*
  (list
   (wo-graph-functions:make-single-sided-reducer
    #'wo-graph:sources-of-vertex
    #'wo-graph:targets-of-vertex
    0 nil)
   (wo-graph-functions:make-single-sided-reducer
    #'wo-graph:targets-of-vertex
    #'wo-graph:sources-of-vertex
    0 nil)
   (wo-graph-functions:make-single-sided-reducer
    #'wo-graph:targets-of-vertex
    #'wo-graph:sources-of-vertex
    1 (lambda (sr tg g) (wo-graph:add-edge sr tg
					   (make-array 3 :initial-contents (list 'reduced
										 sr
										 tg))
					   g)))
   (wo-graph-functions:make-single-sided-reducer
    #'wo-graph:sources-of-vertex
    #'wo-graph:targets-of-vertex
    1 (lambda (tg sr g) (wo-graph:add-edge sr tg
					   (make-array 3 :initial-contents (list 'reduced
										 sr
										 tg))
					   g)))))

(defun neighborhood-graph (graph stream &key
					  (distance 2)
					  start-vertices
					  end-vertices
					  selected-vertices
					  dead-revisions
					  (reducers *default-reducers*))
  (let* ((neighborhood-vertices 
	  (wo-util:add-non-nil
	   (wo-graph-functions:neighborhood selected-vertices graph 
					    :max-distance distance)
	   (union start-vertices end-vertices)))
	 (extended-neighborhood-vertices 
	  (wo-util:add-non-nil
	   (wo-graph-functions:neighborhood selected-vertices graph 
					    :max-distance (+ 1 distance))
	   (union start-vertices end-vertices))))

    (labels ((selector (v g)
	       (declare (ignore g))
	       (member v extended-neighborhood-vertices :test #'equalp))

	     (color (v)
	       (cond 
		 ((member v selected-vertices :test #'equalp) "red")
		 ((member v start-vertices :test #'equalp) "blue")
		 ((member v end-vertices :test #'equalp) "green")
		 ((member v neighborhood-vertices :test #'equalp) "black")
		 (t "gray"))))
      
      (let ((result (wo-graph-functions:simplify graph :selector #'selector
						 :reducers reducers)))
	(write-to-dot stream result
		      :node-attributes (make-default-node-attribute :color #'color)
		      :edge-attributes (make-color-edge-attributes)
		      :node-to-id #'vertex-or-name-to-string)
	result))))



(defun unmerged-graph (starters enders graph stream &key dead-revisions)
  (let ((outgoing-a (wo-graph-functions:neighborhood starters graph :selector #'wo-graph:targets-of-vertex))
	(incoming-b (wo-graph-functions:neighborhood enders graph :selector #'wo-graph:sources-of-vertex)))

    (labels ((selector (v g)
	       (or (member v starters :test #'equalp)
		   (and (wo-git:vertex-names v g)
			(member v outgoing-a :test #'equalp)
			(not (member v incoming-b :test #'equalp))
			(not (member v dead-revisions :test #'equalp)))))
	     (color (v)
	       (cond
		 ((member v starters) "blue")
		 ((member v enders) "green")
		 ((not (member v incoming-b :test #'equalp)) "black")
		 (t "gray"))))

      (let ((result (wo-graph-functions:simplify graph :selector #'selector
						 :reducers *default-reducers*)))
	(write-to-dot stream result
		      :graph-attributes '(:rankdir "LR")
		      :node-attributes (make-default-node-attribute :color #'color)
		      :edge-attributes (make-default-edge-attributes #'selector)
		      :node-to-id #'vertex-or-name-to-string)
	result))))
