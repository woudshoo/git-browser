(in-package :git-browser)

(defwidget svg-container ()
   ((file-name :accessor svg-file-name
               :initarg :svg-file-name
               :initform nil
               :documentation "A file name for the underlying content, the file should
                               contain an SVG 'graph' ready to be literally included in the 
			       html stream.   If cache-content is nil, the file will be reread
                               everytime the widget is rendered.  

                               Note that this option is mutally exclusive with the svg-render-function option.")
    (render-function :accessor svg-render-function
                     :initarg :svg-render-function
                     :initform #'(lambda (w) 
                                    (with-open-file (in-stream (svg-file-name w)) 
                                       (alexandria:copy-stream in-stream *weblocks-output-stream*)))
                     :documentation "A function that takes ?? (one?) argument, the svg-container widget and
                                     should render the svg content
                                     to the *weblocks-output-stream*.
                                     If cache-content is nil, this function will be called each time the widget
				     is rendered.  This option is mutually exclusive with the svg-file-name 
				     option.")
    (cache-content :accessor svg-cache-content
                   :initarg :svg-cache-content
                   :initform nil
                   :documentation "If true, will cache the svg content generated by the render-function.")
    (content-cache :accessor svg-content-cache
                   :initarg :svg-content-cache
                   :initform nil
                   :documentation "The content of the cache.  Only used when cache-content is t.
                                   If the content-cache is nil, it will be filled when needed.")))



(defmethod update-cache-if-empty ((widget svg-container))
  (unless (svg-content-cache widget)
     (setf (svg-content-cache widget)
           (with-output-to-string (*weblocks-output-stream*)
	       (funcall (svg-render-function widget) widget)))))

(defmethod render-svg-content ((widget svg-container))
  (if (svg-cache-content widget)
      (progn
	(update-cache-if-empty widget)
	(render-cache-content widget))
      (funcall (svg-render-function widget) widget)))


(defmethod render-cache-content ((widget svg-container))
  (write-sequence (svg-content-cache widget) *weblocks-output-stream*))

(defmethod render-widget-body ((widget svg-container) &rest args)
  (declare (ignore args))
  (weblocks::ensure-dom-id widget)
  (with-html
    (:div :class "svg-view" :contenteditable "true"
	  (:a :onclick "zoomout(this)" :href "javascript:void(0)" "Hallo this is a link!" )
	  (render-svg-content widget))))


